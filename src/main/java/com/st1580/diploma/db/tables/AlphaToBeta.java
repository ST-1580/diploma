/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Keys;
import db.Public;
import db.tables.records.AlphaToBetaRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlphaToBeta extends TableImpl<AlphaToBetaRecord> {

    private static final long serialVersionUID = 2033499273;

    /**
     * The reference instance of <code>public.alpha_to_beta</code>
     */
    public static final AlphaToBeta ALPHA_TO_BETA = new AlphaToBeta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlphaToBetaRecord> getRecordType() {
        return AlphaToBetaRecord.class;
    }

    /**
     * The column <code>public.alpha_to_beta.alpha_id</code>.
     */
    public final TableField<AlphaToBetaRecord, Long> ALPHA_ID = createField(DSL.name("alpha_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.alpha_to_beta.beta_id</code>.
     */
    public final TableField<AlphaToBetaRecord, Long> BETA_ID = createField(DSL.name("beta_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.alpha_to_beta</code> table reference
     */
    public AlphaToBeta() {
        this(DSL.name("alpha_to_beta"), null);
    }

    /**
     * Create an aliased <code>public.alpha_to_beta</code> table reference
     */
    public AlphaToBeta(String alias) {
        this(DSL.name(alias), ALPHA_TO_BETA);
    }

    /**
     * Create an aliased <code>public.alpha_to_beta</code> table reference
     */
    public AlphaToBeta(Name alias) {
        this(alias, ALPHA_TO_BETA);
    }

    private AlphaToBeta(Name alias, Table<AlphaToBetaRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlphaToBeta(Name alias, Table<AlphaToBetaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AlphaToBeta(Table<O> child, ForeignKey<O, AlphaToBetaRecord> key) {
        super(child, key, ALPHA_TO_BETA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AlphaToBetaRecord> getPrimaryKey() {
        return Keys.ALPHA_TO_BETA__PKEY;
    }

    @Override
    public List<UniqueKey<AlphaToBetaRecord>> getKeys() {
        return Arrays.<UniqueKey<AlphaToBetaRecord>>asList(Keys.ALPHA_TO_BETA__PKEY);
    }

    @Override
    public List<ForeignKey<AlphaToBetaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AlphaToBetaRecord, ?>>asList(Keys.ALPHA_TO_BETA__ALPHA_TO_BETA__FKEY__ALPHA_ID, Keys.ALPHA_TO_BETA__ALPHA_TO_BETA__FKEY__BETA_ID);
    }

    public Alpha alpha() {
        return new Alpha(this, Keys.ALPHA_TO_BETA__ALPHA_TO_BETA__FKEY__ALPHA_ID);
    }

    public Beta beta() {
        return new Beta(this, Keys.ALPHA_TO_BETA__ALPHA_TO_BETA__FKEY__BETA_ID);
    }

    @Override
    public AlphaToBeta as(String alias) {
        return new AlphaToBeta(DSL.name(alias), this);
    }

    @Override
    public AlphaToBeta as(Name alias) {
        return new AlphaToBeta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlphaToBeta rename(String name) {
        return new AlphaToBeta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlphaToBeta rename(Name name) {
        return new AlphaToBeta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
