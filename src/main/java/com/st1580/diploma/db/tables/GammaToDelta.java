/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Keys;
import db.Public;
import db.tables.records.GammaToDeltaRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GammaToDelta extends TableImpl<GammaToDeltaRecord> {

    private static final long serialVersionUID = -1734452571;

    /**
     * The reference instance of <code>public.gamma_to_delta</code>
     */
    public static final GammaToDelta GAMMA_TO_DELTA = new GammaToDelta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GammaToDeltaRecord> getRecordType() {
        return GammaToDeltaRecord.class;
    }

    /**
     * The column <code>public.gamma_to_delta.gamma_id</code>.
     */
    public final TableField<GammaToDeltaRecord, Long> GAMMA_ID = createField(DSL.name("gamma_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.gamma_to_delta.delta_id</code>.
     */
    public final TableField<GammaToDeltaRecord, Long> DELTA_ID = createField(DSL.name("delta_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.gamma_to_delta</code> table reference
     */
    public GammaToDelta() {
        this(DSL.name("gamma_to_delta"), null);
    }

    /**
     * Create an aliased <code>public.gamma_to_delta</code> table reference
     */
    public GammaToDelta(String alias) {
        this(DSL.name(alias), GAMMA_TO_DELTA);
    }

    /**
     * Create an aliased <code>public.gamma_to_delta</code> table reference
     */
    public GammaToDelta(Name alias) {
        this(alias, GAMMA_TO_DELTA);
    }

    private GammaToDelta(Name alias, Table<GammaToDeltaRecord> aliased) {
        this(alias, aliased, null);
    }

    private GammaToDelta(Name alias, Table<GammaToDeltaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> GammaToDelta(Table<O> child, ForeignKey<O, GammaToDeltaRecord> key) {
        super(child, key, GAMMA_TO_DELTA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<GammaToDeltaRecord> getPrimaryKey() {
        return Keys.GAMMA_TO_DELTA__PKEY;
    }

    @Override
    public List<UniqueKey<GammaToDeltaRecord>> getKeys() {
        return Arrays.<UniqueKey<GammaToDeltaRecord>>asList(Keys.GAMMA_TO_DELTA__PKEY);
    }

    @Override
    public List<ForeignKey<GammaToDeltaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GammaToDeltaRecord, ?>>asList(Keys.GAMMA_TO_DELTA__GAMMA_TO_DELTA__FKEY__GAMMA_ID, Keys.GAMMA_TO_DELTA__GAMMA_TO_DELTA__FKEY__DELTA_ID);
    }

    public Gamma gamma() {
        return new Gamma(this, Keys.GAMMA_TO_DELTA__GAMMA_TO_DELTA__FKEY__GAMMA_ID);
    }

    public Delta delta() {
        return new Delta(this, Keys.GAMMA_TO_DELTA__GAMMA_TO_DELTA__FKEY__DELTA_ID);
    }

    @Override
    public GammaToDelta as(String alias) {
        return new GammaToDelta(DSL.name(alias), this);
    }

    @Override
    public GammaToDelta as(Name alias) {
        return new GammaToDelta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GammaToDelta rename(String name) {
        return new GammaToDelta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GammaToDelta rename(Name name) {
        return new GammaToDelta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
