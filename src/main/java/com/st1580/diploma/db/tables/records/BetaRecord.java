/*
 * This file is generated by jOOQ.
 */
package com.st1580.diploma.db.tables.records;


import com.st1580.diploma.db.tables.Beta;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BetaRecord extends UpdatableRecordImpl<BetaRecord> implements Record4<Long, Integer, String, Long> {

    private static final long serialVersionUID = 1418672239;

    /**
     * Setter for <code>public.beta.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.beta.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.beta.epoch</code>.
     */
    public void setEpoch(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.beta.epoch</code>.
     */
    public Integer getEpoch() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.beta.active_status</code>.
     */
    public void setActiveStatus(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.beta.active_status</code>.
     */
    public String getActiveStatus() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.beta.created_ts</code>.
     */
    public void setCreatedTs(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.beta.created_ts</code>.
     */
    public Long getCreatedTs() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Integer, String, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Beta.BETA.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Beta.BETA.EPOCH;
    }

    @Override
    public Field<String> field3() {
        return Beta.BETA.ACTIVE_STATUS;
    }

    @Override
    public Field<Long> field4() {
        return Beta.BETA.CREATED_TS;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getEpoch();
    }

    @Override
    public String component3() {
        return getActiveStatus();
    }

    @Override
    public Long component4() {
        return getCreatedTs();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getEpoch();
    }

    @Override
    public String value3() {
        return getActiveStatus();
    }

    @Override
    public Long value4() {
        return getCreatedTs();
    }

    @Override
    public BetaRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public BetaRecord value2(Integer value) {
        setEpoch(value);
        return this;
    }

    @Override
    public BetaRecord value3(String value) {
        setActiveStatus(value);
        return this;
    }

    @Override
    public BetaRecord value4(Long value) {
        setCreatedTs(value);
        return this;
    }

    @Override
    public BetaRecord values(Long value1, Integer value2, String value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BetaRecord
     */
    public BetaRecord() {
        super(Beta.BETA);
    }

    /**
     * Create a detached, initialised BetaRecord
     */
    public BetaRecord(Long id, Integer epoch, String activeStatus, Long createdTs) {
        super(Beta.BETA);

        set(0, id);
        set(1, epoch);
        set(2, activeStatus);
        set(3, createdTs);
    }
}
