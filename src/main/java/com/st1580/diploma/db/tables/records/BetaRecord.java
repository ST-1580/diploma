/*
 * This file is generated by jOOQ.
 */
package com.st1580.diploma.db.tables.records;


import com.st1580.diploma.db.tables.Beta;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BetaRecord extends UpdatableRecordImpl<BetaRecord> implements Record3<Long, Long, Boolean> {

    private static final long serialVersionUID = 1085585141;

    /**
     * Setter for <code>public.beta.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.beta.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.beta.property_1</code>.
     */
    public void setProperty_1(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.beta.property_1</code>.
     */
    public Long getProperty_1() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.beta.property_2</code>.
     */
    public void setProperty_2(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.beta.property_2</code>.
     */
    public Boolean getProperty_2() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Beta.BETA.ID;
    }

    @Override
    public Field<Long> field2() {
        return Beta.BETA.PROPERTY_1;
    }

    @Override
    public Field<Boolean> field3() {
        return Beta.BETA.PROPERTY_2;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getProperty_1();
    }

    @Override
    public Boolean component3() {
        return getProperty_2();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getProperty_1();
    }

    @Override
    public Boolean value3() {
        return getProperty_2();
    }

    @Override
    public BetaRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public BetaRecord value2(Long value) {
        setProperty_1(value);
        return this;
    }

    @Override
    public BetaRecord value3(Boolean value) {
        setProperty_2(value);
        return this;
    }

    @Override
    public BetaRecord values(Long value1, Long value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BetaRecord
     */
    public BetaRecord() {
        super(Beta.BETA);
    }

    /**
     * Create a detached, initialised BetaRecord
     */
    public BetaRecord(Long id, Long property_1, Boolean property_2) {
        super(Beta.BETA);

        set(0, id);
        set(1, property_1);
        set(2, property_2);
    }
}
